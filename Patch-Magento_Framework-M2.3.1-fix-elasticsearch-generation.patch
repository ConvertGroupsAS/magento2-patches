--- Code/Generator.php	2019-04-30 16:45:45.444157451 +0300
+++ Code/Generator.php	2019-04-30 17:19:49.014949518 +0300
@@ -8,11 +8,15 @@
 use Magento\Framework\Code\Generator\DefinedClasses;
 use Magento\Framework\Code\Generator\EntityAbstract;
 use Magento\Framework\Code\Generator\Io;
+use Magento\Framework\ObjectManager\ConfigInterface;
 use Magento\Framework\ObjectManagerInterface;
 use Magento\Framework\Phrase;
 use Magento\Framework\Filesystem\Driver\File;
 use Psr\Log\LoggerInterface;
 
+/**
+ * Class code generator.
+ */
 class Generator
 {
     const GENERATION_SUCCESS = 'success';
@@ -232,7 +236,21 @@
     {
         if (!$resultEntityType || !$sourceClassName) {
             return self::GENERATION_ERROR;
-        } elseif ($this->definedClasses->isClassLoadableFromDisk($resultClass)) {
+        }
+
+        /** @var ConfigInterface $omConfig */
+        $omConfig = $this->objectManager->get(ConfigInterface::class);
+        $virtualTypes = $omConfig->getVirtualTypes();
+
+        /**
+         * Do not try to autogenerate virtual types
+         * For example virtual types with names overlapping autogenerated suffixes
+         */
+        if (isset($virtualTypes[$resultClass])) {
+            return self::GENERATION_SKIP;
+        }
+
+        if ($this->definedClasses->isClassLoadableFromDisk($resultClass)) {
             $generatedFileName = $this->_ioObject->generateResultFileName($resultClass);
             /**
              * Must handle two edge cases: a competing process has generated the class and written it to disc already,
@@ -244,9 +263,12 @@
                 $this->_ioObject->includeFile($generatedFileName);
             }
             return self::GENERATION_SKIP;
-        } elseif (!isset($this->_generatedEntities[$resultEntityType])) {
+        }
+
+        if (!isset($this->_generatedEntities[$resultEntityType])) {
             throw new \InvalidArgumentException('Unknown generation entity.');
         }
+
         return false;
     }
 }
